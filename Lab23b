#include<iostream>
#include<conio.h>
using namespace std;

class Instruments {
protected:
	unsigned manuf;
	unsigned quality;
public:

	Instruments() {
	 manuf = quality = 0;
	}

	Instruments(unsigned buf_manuf, unsigned buf_quality)
	{
		this->manuf = buf_manuf;
		this->quality = buf_quality;
	}

	void setInstrum(unsigned buf_manuf, unsigned buf_quality)
	{
		this->manuf = buf_manuf;
		this->quality = buf_quality;
		cout << endl << "this is basic function";
	}

	virtual void getInstrum() { 
		cout << endl << "Manufactured in:" << manuf << endl << "Overall nowaday quality:" << quality <<endl<<"this is basic function"<< endl;
	}
	~Instruments() {}
};

class ProInstruments :public Instruments {
public:
	ProInstruments() :Instruments() {}
	ProInstruments(unsigned buf2_manuf, unsigned buf2_quality):Instruments(buf2_manuf,buf2_quality){}
	
	void setInstrum(unsigned buf_manuf, unsigned buf_quality) 	
	{
		this->manuf = buf_manuf;
		this->quality = buf_quality;
		cout << endl << "this is overridden unction" << endl;
	}

	void getInstrum() { 
		cout << endl << "Manufactured in:" << manuf << endl << "Overall nowaday quality:" << quality << endl<<"proinstrum function";
	}
	~ProInstruments(){}
};

int main() {

	Instruments Instrum;
	ProInstruments ProInstrum;
	cout << "Static polymorphism:" << endl;
	Instrum.setInstrum(2,3);
	ProInstrum.setInstrum(2,3);
	cout <<endl<< "Dynamic polymorphism:" << endl;
	Instruments *p;
	p = &Instrum;
	p->getInstrum();
	p = &ProInstrum;
	p->getInstrum();
	_getch();
	return 0;
}
